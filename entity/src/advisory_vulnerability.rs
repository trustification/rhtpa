use crate::{advisory, cvss3, purl_status, vulnerability};
use sea_orm::entity::prelude::*;
use time::OffsetDateTime;

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]
#[sea_orm(table_name = "advisory_vulnerability")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub advisory_id: Uuid,
    #[sea_orm(primary_key)]
    pub vulnerability_id: String,

    pub title: Option<String>,
    pub summary: Option<String>,
    pub description: Option<String>,
    pub reserved_date: Option<OffsetDateTime>,
    pub discovery_date: Option<OffsetDateTime>,
    pub release_date: Option<OffsetDateTime>,
    pub cwes: Option<Vec<String>>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::advisory::Entity",
        from = "super::advisory_vulnerability::Column::AdvisoryId"
        to = "super::advisory::Column::Id")]
    Advisory,
    #[sea_orm(
        belongs_to = "super::vulnerability::Entity",
        from = "super::advisory_vulnerability::Column::VulnerabilityId"
        to = "super::vulnerability::Column::Id")]
    Vulnerability,

    #[sea_orm(has_many = "super::cvss3::Entity")]
    Cvss3,

    #[sea_orm(has_many = "super::purl_status::Entity")]
    PurlStatus,
}

impl Related<advisory::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Advisory.def()
    }
}

impl Related<vulnerability::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Vulnerability.def()
    }
}

impl Related<cvss3::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Cvss3.def()
    }
}

impl Related<purl_status::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PurlStatus.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
