use crate::{advisory, advisory_vulnerability, cvss3, vulnerability_description};
use async_graphql::SimpleObject;
use sea_orm::entity::prelude::*;
use time::OffsetDateTime;

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, SimpleObject)]
#[sea_orm(table_name = "vulnerability")]
#[graphql(concrete(name = "Vulnerability", params()))]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: String,
    pub title: Option<String>,
    pub reserved: Option<OffsetDateTime>,
    pub published: Option<OffsetDateTime>,
    pub modified: Option<OffsetDateTime>,
    pub withdrawn: Option<OffsetDateTime>,
    pub cwes: Option<Vec<String>>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::advisory::Entity")]
    Advisory,

    #[sea_orm(has_many = "super::advisory_vulnerability::Entity")]
    AdvisoryVulnerability,

    #[sea_orm(has_many = "super::vulnerability_description::Entity")]
    Descriptions,

    #[sea_orm(has_many = "super::cvss3::Entity")]
    Cvss3,

    #[sea_orm(has_many = "super::purl_status::Entity")]
    PurlStatuses,
}

impl Related<super::purl_status::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PurlStatuses.def()
    }

    fn via() -> Option<RelationDef> {
        Some(Relation::AdvisoryVulnerability.def())
    }
}

impl Related<advisory::Entity> for Entity {
    fn to() -> RelationDef {
        advisory_vulnerability::Relation::Advisory.def()
    }

    fn via() -> Option<RelationDef> {
        Some(advisory_vulnerability::Relation::Vulnerability.def().rev())
    }
}

impl Related<advisory_vulnerability::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AdvisoryVulnerability.def()
    }
}

impl Related<cvss3::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Cvss3.def()
    }
}

impl Related<vulnerability_description::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Descriptions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
