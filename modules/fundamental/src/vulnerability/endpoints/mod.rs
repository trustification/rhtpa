#[cfg(test)]
mod test;

use crate::vulnerability::service::VulnerabilityService;
use crate::Error::Internal;
use actix_web::{delete, get, web, HttpResponse, Responder};
use trustify_common::db::query::Query;
use trustify_common::db::{Database, Transactional};
use trustify_common::model::Paginated;
use utoipa::OpenApi;

pub fn configure(config: &mut web::ServiceConfig, db: Database) {
    let service = VulnerabilityService::new(db);
    config
        .app_data(web::Data::new(service))
        .service(all)
        .service(delete)
        .service(get);
}

#[derive(OpenApi)]
#[openapi(
    paths(all, get, delete),
    components(schemas(
        crate::vulnerability::model::VulnerabilityHead,
        crate::vulnerability::model::VulnerabilitySummary,
        crate::vulnerability::model::VulnerabilityDetails,
        crate::vulnerability::model::VulnerabilityAdvisoryHead,
        crate::vulnerability::model::VulnerabilityAdvisorySummary,
        crate::vulnerability::model::VulnerabilityAdvisoryStatus,
        crate::vulnerability::model::PaginatedVulnerabilitySummary,
        crate::vulnerability::model::VulnerabilitySbomStatus,
        trustify_common::advisory::AdvisoryVulnerabilityAssertions,
        trustify_common::advisory::Assertion,
        trustify_common::purl::Purl,
    )),
    tags()
)]
pub struct ApiDoc;

#[utoipa::path(
    tag = "vulnerability",
    operation_id = "listVulnerabilities",
    context_path = "/api",
    params(
        Query,
        Paginated,
    ),
    responses(
        (status = 200, description = "Matching vulnerabilities", body = PaginatedVulnerabilitySummary),
    ),
)]
#[get("/v1/vulnerability")]
/// List vulnerabilities
pub async fn all(
    state: web::Data<VulnerabilityService>,
    web::Query(search): web::Query<Query>,
    web::Query(paginated): web::Query<Paginated>,
) -> actix_web::Result<impl Responder> {
    Ok(HttpResponse::Ok().json(
        state
            .fetch_vulnerabilities(search, paginated, Transactional::None)
            .await?,
    ))
}

#[utoipa::path(
    tag = "vulnerability",
    operation_id = "getVulnerability",
    context_path = "/api",
    params(
        ("id", Path, description = "ID of the vulnerability")
    ),
    responses(
        (status = 200, description = "Specified vulnerability", body = VulnerabilityDetails),
        (status = 404, description = "Specified vulnerability not found"),
    ),
)]
#[get("/v1/vulnerability/{id}")]
/// Retrieve vulnerability details
pub async fn get(
    state: web::Data<VulnerabilityService>,
    id: web::Path<String>,
) -> actix_web::Result<impl Responder> {
    let vuln = state.fetch_vulnerability(&id, Transactional::None).await?;
    if let Some(vuln) = vuln {
        Ok(HttpResponse::Ok().json(vuln))
    } else {
        Ok(HttpResponse::NotFound().finish())
    }
}

#[utoipa::path(
    tag = "vulnerability",
    operation_id = "deleteVulnerability",
    context_path = "/api",
    params(
        ("id", Path, description = "ID of the vulnerability")
    ),
    responses(
        (status = 200, description = "Specified vulnerability", body = VulnerabilityDetails),
        (status = 404, description = "Specified vulnerability not found"),
    ),
)]
#[delete("/v1/vulnerability/{id}")]
/// Delete vulnerability
pub async fn delete(
    state: web::Data<VulnerabilityService>,
    id: web::Path<String>,
) -> actix_web::Result<impl Responder> {
    let vuln = state.fetch_vulnerability(&id, Transactional::None).await?;
    if let Some(vuln) = vuln {
        let rows_affected = state
            .delete_vulnerability(&vuln.head.identifier, ())
            .await?;
        match rows_affected {
            0 => Ok(HttpResponse::NotFound().finish()),
            1 => Ok(HttpResponse::Ok().json(vuln)),
            _ => Err(Internal("Unexpected number of rows affected".into()).into()),
        }
    } else {
        Ok(HttpResponse::NotFound().finish())
    }
}
