use crate::test::caller;
use crate::vulnerability::model::VulnerabilitySummary;
use actix_http::StatusCode;
use actix_web::test::TestRequest;
use serde_json::Value;
use test_context::test_context;
use test_log::test;
use time::{macros::datetime, OffsetDateTime};
use trustify_common::{hashing::Digests, model::PaginatedResults};
use trustify_cvss::cvss3::{
    AttackComplexity, AttackVector, Availability, Confidentiality, Cvss3Base, Integrity,
    PrivilegesRequired, Scope, UserInteraction,
};
use trustify_module_ingestor::graph::{
    advisory::AdvisoryInformation, vulnerability::VulnerabilityInformation,
};
use trustify_test_context::{call::CallService, TrustifyContext};

#[test_context(TrustifyContext)]
#[test(actix_web::test)]
async fn all_vulnerabilities(ctx: &TrustifyContext) -> Result<(), anyhow::Error> {
    let app = caller(ctx).await?;

    let advisory = ctx
        .graph
        .ingest_advisory(
            "CAPT-1",
            ("source", "http://captpickles.com/"),
            &Digests::digest("CAPT-1"),
            AdvisoryInformation {
                id: "CAPT-1".to_string(),
                title: Some("CAPT-1".to_string()),
                version: None,
                issuer: None,
                published: Some(OffsetDateTime::now_utc()),
                modified: None,
                withdrawn: None,
            },
            &ctx.db,
        )
        .await?;

    let advisory_vuln = advisory
        .link_to_vulnerability("CVE-123", None, &ctx.db)
        .await?;
    advisory_vuln
        .ingest_cvss3_score(
            Cvss3Base {
                minor_version: 0,
                av: AttackVector::Network,
                ac: AttackComplexity::Low,
                pr: PrivilegesRequired::High,
                ui: UserInteraction::None,
                s: Scope::Changed,
                c: Confidentiality::High,
                i: Integrity::None,
                a: Availability::None,
            },
            &ctx.db,
        )
        .await?;

    let advisory = ctx
        .graph
        .ingest_advisory(
            "RHSA-2",
            ("source", "http://redhat.com/"),
            &Digests::digest("RHSA-2"),
            AdvisoryInformation {
                id: "RHSA-2".to_string(),
                title: Some("RHSA-2".to_string()),
                version: None,
                issuer: None,
                published: Some(OffsetDateTime::now_utc()),
                modified: None,
                withdrawn: None,
            },
            &ctx.db,
        )
        .await?;

    advisory
        .link_to_vulnerability("CVE-345", None, &ctx.db)
        .await?;

    ctx.graph
        .ingest_vulnerability("CVE-123", (), &ctx.db)
        .await?;
    ctx.graph
        .ingest_vulnerability("CVE-345", (), &ctx.db)
        .await?;

    let uri = "/api/v1/vulnerability";

    let request = TestRequest::get().uri(uri).to_request();

    let response: PaginatedResults<VulnerabilitySummary> =
        app.call_and_read_body_json(request).await;

    log::debug!("{:#?}", response);

    assert_eq!(2, response.items.len());

    Ok(())
}

#[test_context(TrustifyContext)]
#[test(actix_web::test)]
async fn one_vulnerability(ctx: &TrustifyContext) -> Result<(), anyhow::Error> {
    let app = caller(ctx).await?;

    let advisory = ctx
        .graph
        .ingest_advisory(
            "RHSA-1",
            ("source", "http://redhat.com/"),
            &Digests::digest("RHSA-1"),
            AdvisoryInformation {
                id: "RHSA-1".to_string(),
                title: Some("RHSA-1".to_string()),
                version: None,
                issuer: None,
                published: Some(OffsetDateTime::now_utc()),
                modified: None,
                withdrawn: None,
            },
            &ctx.db,
        )
        .await?;

    let advisory_vuln = advisory
        .link_to_vulnerability("CVE-123", None, &ctx.db)
        .await?;

    advisory_vuln
        .ingest_cvss3_score(
            Cvss3Base {
                minor_version: 0,
                av: AttackVector::Network,
                ac: AttackComplexity::Low,
                pr: PrivilegesRequired::High,
                ui: UserInteraction::None,
                s: Scope::Changed,
                c: Confidentiality::High,
                i: Integrity::High,
                a: Availability::Low,
            },
            &ctx.db,
        )
        .await?;

    let advisory = ctx
        .graph
        .ingest_advisory(
            "RHSA-2",
            ("source", "http://redhat.com/"),
            &Digests::digest("RHSA-2"),
            AdvisoryInformation {
                id: "RHSA-2".to_string(),
                title: Some("RHSA-2".to_string()),
                version: None,
                issuer: None,
                published: Some(OffsetDateTime::now_utc()),
                modified: None,
                withdrawn: None,
            },
            &ctx.db,
        )
        .await?;

    advisory
        .link_to_vulnerability("CVE-345", None, &ctx.db)
        .await?;

    ctx.graph
        .ingest_vulnerability(
            "CVE-123",
            VulnerabilityInformation {
                title: Some("Something wicked this way comes".to_string()),
                published: Some(datetime!(2019-01-01 0:00 UTC)),
                reserved: None,
                modified: None,
                withdrawn: None,
                cwes: None,
            },
            &ctx.db,
        )
        .await?;

    let uri = "/api/v1/vulnerability/CVE-123";
    let request = TestRequest::get().uri(uri).to_request();
    let vuln: Value = app.call_and_read_body_json(request).await;
    log::debug!("{:#?}", vuln);

    assert_eq!(vuln["identifier"], "CVE-123");
    assert_eq!(vuln["title"], "Something wicked this way comes");
    assert_eq!(vuln["published"], "2019-01-01T00:00:00Z");

    Ok(())
}

#[test_context(TrustifyContext)]
#[test(actix_web::test)]
async fn delete_vulnerability(ctx: &TrustifyContext) -> Result<(), anyhow::Error> {
    let app = caller(ctx).await?;

    let advisory = ctx
        .graph
        .ingest_advisory(
            "RHSA-1",
            ("source", "http://redhat.com/"),
            &Digests::digest("RHSA-1"),
            AdvisoryInformation {
                id: "RHSA-1".to_string(),
                title: Some("RHSA-1".to_string()),
                version: None,
                issuer: None,
                published: Some(OffsetDateTime::now_utc()),
                modified: None,
                withdrawn: None,
            },
            &ctx.db,
        )
        .await?;

    let advisory_vuln = advisory
        .link_to_vulnerability("CVE-123", None, &ctx.db)
        .await?;

    advisory_vuln
        .ingest_cvss3_score(
            Cvss3Base {
                minor_version: 0,
                av: AttackVector::Network,
                ac: AttackComplexity::Low,
                pr: PrivilegesRequired::High,
                ui: UserInteraction::None,
                s: Scope::Changed,
                c: Confidentiality::High,
                i: Integrity::High,
                a: Availability::Low,
            },
            &ctx.db,
        )
        .await?;

    let advisory = ctx
        .graph
        .ingest_advisory(
            "RHSA-2",
            ("source", "http://redhat.com/"),
            &Digests::digest("RHSA-2"),
            AdvisoryInformation {
                id: "RHSA-2".to_string(),
                title: Some("RHSA-2".to_string()),
                version: None,
                issuer: None,
                published: Some(OffsetDateTime::now_utc()),
                modified: None,
                withdrawn: None,
            },
            &ctx.db,
        )
        .await?;

    advisory
        .link_to_vulnerability("CVE-345", None, &ctx.db)
        .await?;

    ctx.graph
        .ingest_vulnerability(
            "CVE-123",
            VulnerabilityInformation {
                title: Some("Something wicked this way comes".to_string()),
                reserved: None,
                published: Some(OffsetDateTime::now_utc()),
                modified: None,
                withdrawn: None,
                cwes: None,
            },
            &ctx.db,
        )
        .await?;

    let uri = "/api/v1/vulnerability/CVE-123";
    let response = app
        .call_service(TestRequest::get().uri(uri).to_request())
        .await;
    log::debug!("Code: {}", response.status());
    assert_eq!(response.status(), StatusCode::OK);

    // we should be able to delete the vulnerability
    let response = app
        .call_service(TestRequest::delete().uri(uri).to_request())
        .await;
    log::debug!("Code: {}", response.status());
    assert_eq!(response.status(), StatusCode::OK);

    // we should not be able to get the vulnerability again
    let response = app
        .call_service(TestRequest::get().uri(uri).to_request())
        .await;
    log::debug!("Code: {}", response.status());
    assert_eq!(response.status(), StatusCode::NOT_FOUND);

    // we should not be able to delete the vulnerability again
    let response = app
        .call_service(TestRequest::delete().uri(uri).to_request())
        .await;
    log::debug!("Code: {}", response.status());
    assert_eq!(response.status(), StatusCode::NOT_FOUND);

    Ok(())
}

#[test_context(TrustifyContext)]
#[test(actix_web::test)]
async fn get_vulnerability(ctx: &TrustifyContext) -> Result<(), anyhow::Error> {
    ctx.ingest_documents(["cve/CVE-2024-26308.json", "spdx/SATELLITE-6.15-RHEL-8.json"])
        .await?;

    let app = caller(ctx).await?;
    let vuln: Value = app
        .call_and_read_body_json(
            TestRequest::get()
                .uri("/api/v1/vulnerability/CVE-2024-26308")
                .to_request(),
        )
        .await;

    log::debug!("{vuln:#?}");

    // assert expected fields
    assert_eq!(vuln["normative"], true);
    assert_eq!(vuln["identifier"], "CVE-2024-26308");
    assert_eq!(
        vuln["advisories"][0]["sboms"][0]["number_of_packages"],
        2084
    );

    Ok(())
}
