use crate::test::caller;
use crate::vulnerability::model::VulnerabilitySummary;
use actix_http::StatusCode;
use actix_web::test::TestRequest;
use jsonpath_rust::JsonPathQuery;
use serde_json::{json, Value};
use test_context::test_context;
use test_log::test;
use time::OffsetDateTime;
use trustify_common::db::Transactional;
use trustify_common::hashing::Digests;
use trustify_common::model::PaginatedResults;
use trustify_cvss::cvss3::{
    AttackComplexity, AttackVector, Availability, Confidentiality, Cvss3Base, Integrity,
    PrivilegesRequired, Scope, UserInteraction,
};
use trustify_module_ingestor::graph::advisory::AdvisoryInformation;
use trustify_module_ingestor::graph::vulnerability::VulnerabilityInformation;
use trustify_test_context::{call::CallService, TrustifyContext};

#[test_context(TrustifyContext)]
#[test(actix_web::test)]
async fn all_vulnerabilities(ctx: &TrustifyContext) -> Result<(), anyhow::Error> {
    let app = caller(ctx).await?;

    let advisory = ctx
        .graph
        .ingest_advisory(
            "CAPT-1",
            ("source", "http://captpickles.com/"),
            &Digests::digest("CAPT-1"),
            AdvisoryInformation {
                title: Some("CAPT-1".to_string()),
                version: None,
                issuer: None,
                published: Some(OffsetDateTime::now_utc()),
                modified: None,
                withdrawn: None,
            },
            (),
        )
        .await?;

    let advisory_vuln = advisory
        .link_to_vulnerability("CVE-123", None, Transactional::None)
        .await?;
    advisory_vuln
        .ingest_cvss3_score(
            Cvss3Base {
                minor_version: 0,
                av: AttackVector::Network,
                ac: AttackComplexity::Low,
                pr: PrivilegesRequired::High,
                ui: UserInteraction::None,
                s: Scope::Changed,
                c: Confidentiality::High,
                i: Integrity::None,
                a: Availability::None,
            },
            (),
        )
        .await?;

    let advisory = ctx
        .graph
        .ingest_advisory(
            "RHSA-2",
            ("source", "http://redhat.com/"),
            &Digests::digest("RHSA-2"),
            AdvisoryInformation {
                title: Some("RHSA-2".to_string()),
                version: None,
                issuer: None,
                published: Some(OffsetDateTime::now_utc()),
                modified: None,
                withdrawn: None,
            },
            (),
        )
        .await?;

    advisory
        .link_to_vulnerability("CVE-345", None, Transactional::None)
        .await?;

    ctx.graph.ingest_vulnerability("CVE-123", (), ()).await?;
    ctx.graph.ingest_vulnerability("CVE-345", (), ()).await?;

    let uri = "/api/v1/vulnerability";

    let request = TestRequest::get().uri(uri).to_request();

    let response: PaginatedResults<VulnerabilitySummary> =
        app.call_and_read_body_json(request).await;

    log::debug!("{:#?}", response);

    assert_eq!(2, response.items.len());

    Ok(())
}

#[test_context(TrustifyContext)]
#[test(actix_web::test)]
async fn one_vulnerability(ctx: &TrustifyContext) -> Result<(), anyhow::Error> {
    let app = caller(ctx).await?;

    let advisory = ctx
        .graph
        .ingest_advisory(
            "RHSA-1",
            ("source", "http://redhat.com/"),
            &Digests::digest("RHSA-1"),
            AdvisoryInformation {
                title: Some("RHSA-1".to_string()),
                version: None,
                issuer: None,
                published: Some(OffsetDateTime::now_utc()),
                modified: None,
                withdrawn: None,
            },
            (),
        )
        .await?;

    let advisory_vuln = advisory
        .link_to_vulnerability("CVE-123", None, Transactional::None)
        .await?;

    advisory_vuln
        .ingest_cvss3_score(
            Cvss3Base {
                minor_version: 0,
                av: AttackVector::Network,
                ac: AttackComplexity::Low,
                pr: PrivilegesRequired::High,
                ui: UserInteraction::None,
                s: Scope::Changed,
                c: Confidentiality::High,
                i: Integrity::High,
                a: Availability::Low,
            },
            (),
        )
        .await?;

    let advisory = ctx
        .graph
        .ingest_advisory(
            "RHSA-2",
            ("source", "http://redhat.com/"),
            &Digests::digest("RHSA-2"),
            AdvisoryInformation {
                title: Some("RHSA-2".to_string()),
                version: None,
                issuer: None,
                published: Some(OffsetDateTime::now_utc()),
                modified: None,
                withdrawn: None,
            },
            (),
        )
        .await?;

    advisory
        .link_to_vulnerability("CVE-345", None, Transactional::None)
        .await?;

    ctx.graph
        .ingest_vulnerability(
            "CVE-123",
            VulnerabilityInformation {
                title: Some("Something wicked this way comes".to_string()),
                published: Some(OffsetDateTime::now_utc()),
                modified: None,
                withdrawn: None,
                cwes: None,
            },
            (),
        )
        .await?;

    let uri = "/api/v1/vulnerability/CVE-123";
    let request = TestRequest::get().uri(uri).to_request();
    let response: Value = app.call_and_read_body_json(request).await;

    log::debug!("{:#?}", response);

    let identifier = response.clone().path("$.identifier").unwrap();
    let published = response.clone().path("$.published").unwrap();
    let title = response.clone().path("$.title").unwrap();

    assert_eq!(identifier, json!(["CVE-123"]));
    assert_eq!(title, json!(["Something wicked this way comes"]));

    assert!(published.get(0).is_some());
    Ok(())
}

#[test_context(TrustifyContext)]
#[test(actix_web::test)]
async fn delete_vulnerability(ctx: &TrustifyContext) -> Result<(), anyhow::Error> {
    let app = caller(ctx).await?;

    let advisory = ctx
        .graph
        .ingest_advisory(
            "RHSA-1",
            ("source", "http://redhat.com/"),
            &Digests::digest("RHSA-1"),
            AdvisoryInformation {
                title: Some("RHSA-1".to_string()),
                version: None,
                issuer: None,
                published: Some(OffsetDateTime::now_utc()),
                modified: None,
                withdrawn: None,
            },
            (),
        )
        .await?;

    let advisory_vuln = advisory
        .link_to_vulnerability("CVE-123", None, Transactional::None)
        .await?;

    advisory_vuln
        .ingest_cvss3_score(
            Cvss3Base {
                minor_version: 0,
                av: AttackVector::Network,
                ac: AttackComplexity::Low,
                pr: PrivilegesRequired::High,
                ui: UserInteraction::None,
                s: Scope::Changed,
                c: Confidentiality::High,
                i: Integrity::High,
                a: Availability::Low,
            },
            (),
        )
        .await?;

    let advisory = ctx
        .graph
        .ingest_advisory(
            "RHSA-2",
            ("source", "http://redhat.com/"),
            &Digests::digest("RHSA-2"),
            AdvisoryInformation {
                title: Some("RHSA-2".to_string()),
                version: None,
                issuer: None,
                published: Some(OffsetDateTime::now_utc()),
                modified: None,
                withdrawn: None,
            },
            (),
        )
        .await?;

    advisory
        .link_to_vulnerability("CVE-345", None, Transactional::None)
        .await?;

    ctx.graph
        .ingest_vulnerability(
            "CVE-123",
            VulnerabilityInformation {
                title: Some("Something wicked this way comes".to_string()),
                published: Some(OffsetDateTime::now_utc()),
                modified: None,
                withdrawn: None,
                cwes: None,
            },
            (),
        )
        .await?;

    let uri = "/api/v1/vulnerability/CVE-123";
    let response = app
        .call_service(TestRequest::get().uri(uri).to_request())
        .await;
    log::debug!("Code: {}", response.status());
    assert_eq!(response.status(), StatusCode::OK);

    // we should be able to delete the vulnerability
    let response = app
        .call_service(TestRequest::delete().uri(uri).to_request())
        .await;
    log::debug!("Code: {}", response.status());
    assert_eq!(response.status(), StatusCode::OK);

    // we should not be able to get the vulnerability again
    let response = app
        .call_service(TestRequest::get().uri(uri).to_request())
        .await;
    log::debug!("Code: {}", response.status());
    assert_eq!(response.status(), StatusCode::NOT_FOUND);

    // we should not be able to delete the vulnerability again
    let response = app
        .call_service(TestRequest::delete().uri(uri).to_request())
        .await;
    log::debug!("Code: {}", response.status());
    assert_eq!(response.status(), StatusCode::NOT_FOUND);

    Ok(())
}
