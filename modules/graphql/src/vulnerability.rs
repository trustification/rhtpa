use std::sync::Arc;

use async_graphql::{Context, FieldError, FieldResult, Object};
use trustify_common::db::Transactional;
use trustify_entity::vulnerability::Model as Vulnerability;
use trustify_module_ingestor::graph::Graph;

#[derive(Default)]
pub struct VulnerabilityQuery;

#[Object]
impl VulnerabilityQuery {
    async fn get_vulnerability_by_id<'a>(
        &self,
        ctx: &Context<'a>,
        identifier: String,
    ) -> FieldResult<Vulnerability> {
        let graph = ctx.data::<Arc<Graph>>()?;
        let vulnerability = graph
            .get_vulnerability(&identifier, Transactional::None)
            .await;

        match vulnerability {
            Ok(Some(vulnerability)) => Ok(Vulnerability {
                id: vulnerability.vulnerability.id,
                title: vulnerability.vulnerability.title,
                reserved: vulnerability.vulnerability.reserved,
                published: vulnerability.vulnerability.published,
                modified: vulnerability.vulnerability.modified,
                withdrawn: vulnerability.vulnerability.withdrawn,
                cwes: vulnerability.vulnerability.cwes,
            }),
            Ok(None) => Err(FieldError::new("Vulnerability not found")),
            Err(err) => Err(FieldError::from(err)),
        }
    }

    async fn get_vulnerabilities<'a>(&self, ctx: &Context<'a>) -> FieldResult<Vec<Vulnerability>> {
        let graph = ctx.data::<Arc<Graph>>()?;
        let vulnerabilities = match graph.get_vulnerabilities(Transactional::None).await {
            Ok(vulnerability) => vulnerability,
            _ => vec![],
        };

        vulnerabilities
            .into_iter()
            .map(|vulnerability| {
                Ok(Vulnerability {
                    id: vulnerability.vulnerability.id,
                    title: vulnerability.vulnerability.title,
                    reserved: vulnerability.vulnerability.reserved,
                    published: vulnerability.vulnerability.published,
                    modified: vulnerability.vulnerability.modified,
                    withdrawn: vulnerability.vulnerability.withdrawn,
                    cwes: vulnerability.vulnerability.cwes,
                })
            })
            .collect()
    }
}
